local struct Proto;

typedef struct {
  uint64 name_size;  
  char var_str[];    
} UpValueName;

typedef struct {
  uint32 size_upvalue_names;   
  UpValueName upvalue_name[]; 
} UpValueNames;


typedef struct {
    uint64 varname_size;  
    char varname[];       
    uint32 startpc;      
    uint32 endpc;
} LocVar;

typedef struct {
    uint32 sizelocvars;   
    LocVar local_var[];   
} LocVars;




typedef struct {
    uint32 sizelineinfo;  
    uint32 line[];       
} Lines;


typedef struct {
    uint64 src_string_size;  
    char str[];            
} SourceName;


typedef struct(string level) {
    uint32 sizep;   
    Proto proto[];  
} Protos;


typedef struct {
    uchar instack;   
    uchar idx;       
} Upvaldesc;


typedef struct {
    uint32 sizeupvalues;    
    Upvaldesc upvaldesc[];  
} Upvaldescs;

typedef struct {
    union Value {

        lua_Val val;        /* booleans */
        
        lua_Integer i;      /* integer numbers */
        lua_Number n;       /* float numbers */
    } value_;
} TValue;

typedef struct {
    LUA_DATATYPE const_type;  
    TValue val;
} Constant;

typedef struct {
    uint32 sizek;         
    Constant constant[];  
} Constants;





struct Code {
    uint32 sizecode;  
    uint32 inst[];    
} code;

typedef struct {
    uint32 linedefined;     
    uint32 lastlinedefined; // 行信息
    uchar numparams;        // 函数参数个数
    uchar is_vararg;        // 是否为可变参数列表，1表示是
    uchar maxstacksize;     // 当前函数的Lua栈大小，值为2的幂
} ProtoHeader;

typedef struct {
    char signature[4];   
    uchar version;       
    uchar format;
    uchar endian;
    uchar size_int;
    uchar size_size_t;
    uchar size_Instruction;
    uchar size_lua_Number;
    uchar lua_num_valid;
    uchar luac_tail[0x6];
} GlobalHeader;

typedef struct {
    ProtoHeader header;    // header
    Code code;             // code
    Constants constants;   // constants
    Protos protos;         // functions
    Upvaldescs upvaldescs; // upvalues
    SourceName src_name;   // string
    Lines lines;           // lines
    LocVars loc_vars;      // locals
    UpValueNames names;    // upvalue names
} Proto;


typedef struct {
    GlobalHeader header;
    Proto proto("0");
} Luac;

local char endian = ReadByte(6);

if (endian == 1) {
    LittleEndian();
} else if(0 == endian) {
    BigEndian();
} else {
    Warning("Error endian.");
}

Luac luac;